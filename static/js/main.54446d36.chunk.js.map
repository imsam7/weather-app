{"version":3,"sources":["shared/state/userCity/actionTypes.js","shared/state/userCity/actions.js","shared/state/weather/actionTypes.js","shared/state/weather/actions.js","components/containers/WeatherHomeContainer.js","App.js","reportWebVitals.js","shared/state/userCity/reducer.js","shared/state/weather/reducer.js","shared/reducers.js","shared/util/serviceHelper.js","shared/apis.js","shared/state/userCity/saga.js","shared/state/weather/saga.js","shared/sagas.js","index.js"],"names":["GET_USERCITY","GET_USERCITY_SUCCESS","GET_USERCITY_FAILURE","loadUserCity","payload","type","GET_WEATHER","GET_WEATHER_SUCCESS","GET_WEATHER_FAILURE","loadWeather","WeatherHomeContainer","props","e","src","onSubmit","console","log","React","Component","withConnect","connect","state","userCityData","userCity","weatherData","weather","dispatch","compose","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","loading","userCityDetails","error","userCityReducer","action","data","weatherReducer","appReducer","combineReducers","rootReducer","undefined","serviceHelper","get","serviceUrl","requestData","fetch","headers","res","status","json","message","window","location","href","post","body","JSON","stringify","getUserCity","userName","getWeather","response","catch","err","userCitySaga","call","put","takeLatest","weatherDetails","weatherSaga","city","rootSaga","all","sagaMiddleWare","createSagaMiddleWare","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54446d36.chunk.js","sourcesContent":["export const GET_USERCITY = 'GET_USERCITY'\r\nexport const GET_USERCITY_SUCCESS = 'GET_USERCITY_SUCCESS'\r\nexport const GET_USERCITY_FAILURE = 'GET_USERCITY_FAILURE'","import { GET_USERCITY, GET_USERCITY_SUCCESS, GET_USERCITY_FAILURE } from './actionTypes'\r\n\r\nexport const loadUserCity = (payload) => ({ type: GET_USERCITY, payload });\r\nexport const loadUserCitySuccess = data => ({ type: GET_USERCITY_SUCCESS, data });\r\nexport const loadUserCityFailure = (error) => ({ type: GET_USERCITY_FAILURE, error });","export const GET_WEATHER = 'GET_WEATHER'\r\nexport const GET_WEATHER_SUCCESS = 'GET_WEATHER_SUCCESS'\r\nexport const GET_WEATHER_FAILURE = 'GET_WEATHER_FAILURE'","import { GET_WEATHER, GET_WEATHER_SUCCESS, GET_WEATHER_FAILURE } from './actionTypes'\r\n\r\nexport const loadWeather = (payload) => ({ type: GET_WEATHER, payload });\r\nexport const loadWeatheruccess = data => ({ type: GET_WEATHER_SUCCESS, data });\r\nexport const loadWeatherFailure = (error) => ({ type: GET_WEATHER_FAILURE, error });","import React from 'react';\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { loadUserCity } from '../../shared/state/userCity/actions'\r\nimport { loadWeather } from '../../shared/state/weather/actions'\r\nimport WeatherHomeLayout from '../layouts/WeatherHomeLayout'\r\nimport Loader from '../../shared/components/loader'\r\nimport SearchBar from 'material-ui-search-bar';\r\nimport {Form} from 'react-formio';\r\n\r\nclass WeatherHomeContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount(e) {\r\n        const json = {\r\n            \"display\": \"form\",\r\n            \"settings\": {\r\n                \"pdf\": {\r\n                    \"id\": \"1ec0f8ee-6685-5d98-a847-26f67b67d6f0\",\r\n                    \"src\": \"https://files.form.io/pdf/5692b91fd1028f01000407e3/file/1ec0f8ee-6685-5d98-a847-26f67b67d6f0\"\r\n                }\r\n            },\r\n            \"components\": [\r\n                {\r\n                    \"label\": \"Select\",\r\n                    \"tableView\": true,\r\n                    \"data\": {\r\n                        \"values\": [\r\n                            {\r\n                                \"label\": \"\",\r\n                                \"value\": \"\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"selectThreshold\": 0.3,\r\n                    \"validate\": {\r\n                        \"onlyAvailableItems\": false\r\n                    },\r\n                    \"key\": \"select\",\r\n                    \"type\": \"select\",\r\n                    \"indexeddb\": {\r\n                        \"filter\": {}\r\n                    },\r\n                    \"input\": true\r\n                },\r\n                {\r\n                    \"type\": \"button\",\r\n                    \"label\": \"Submit\",\r\n                    \"key\": \"submit\",\r\n                    \"disableOnInvalid\": true,\r\n                    \"input\": true,\r\n                    \"tableView\": false\r\n                }\r\n            ]\r\n        }\r\n        // e.preventDefault()\r\n        // const { username } = this.props.match.params\r\n        // this.props.dispatch(loadUserCity({ userName: 'imsam7' }))\r\n        // this.props.dispatch(loadWeather({ city: 'Bhopal' }))\r\n        // console.log(this.props.followersData)\r\n    }\r\n\r\n    render() {\r\n        // if (this.props.followersData.loading)\r\n        //     return <Loader />\r\n        return <Form src=\"json\" onSubmit={console.log} />\r\n        return <SearchBar id=\"autocomplete\" placeholder=\"Search City\" hintText=\"Search City\"\r\n            style={{\r\n                margin: '0 auto',\r\n                maxWidth: 800,\r\n            }}\r\n        />\r\n        return <WeatherHomeLayout userCityData={this.props.userCityData} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return (\r\n        {\r\n            userCityData: state && state.userCity,\r\n            weatherData: state && state.weather\r\n        }\r\n    )\r\n}\r\n\r\nconst withConnect = connect(mapStateToProps, (dispatch) => ({ loadUserCity, loadWeather, dispatch }))\r\n\r\nexport default compose(withConnect)(WeatherHomeContainer);","import {  Route, BrowserRouter as Router } from 'react-router-dom';\r\nimport WeatherHomeContainer from './components/containers/WeatherHomeContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Route exact path=\"/\" component={WeatherHomeContainer} />\r\n      {/* <Route path='/Followers/:username' component={FollowersContainer} /> */}\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { GET_USERCITY, GET_USERCITY_SUCCESS, GET_USERCITY_FAILURE } from './actionTypes'\r\n\r\nconst initialState = {\r\n    loading: true,\r\n    userCityDetails: {},\r\n    error: null\r\n}\r\n\r\nconst userCityReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_USERCITY:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case GET_USERCITY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: null,\r\n                userCityDetails: action.data\r\n            };\r\n        case GET_USERCITY_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: action,\r\n                userCityDetails: null\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default userCityReducer;","import { GET_WEATHER, GET_WEATHER_SUCCESS, GET_WEATHER_FAILURE } from './actionTypes'\r\n\r\nconst initialState = {\r\n    loading: true,\r\n    weather: {},\r\n    error: null\r\n}\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_WEATHER:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case GET_WEATHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: null,\r\n                weather: action.data\r\n            };\r\n        case GET_WEATHER_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: action,\r\n                weather: null\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default weatherReducer;","import { combineReducers } from 'redux';\r\nimport userCityReducer from './state/userCity/reducer';\r\nimport weatherReducer from './state/weather/reducer';\r\n\r\nconst appReducer = combineReducers({\r\n    userCity: userCityReducer,\r\n    weather: weatherReducer\r\n});\r\n\r\nconst rootReducer = (state = {}, action) => {\r\n    if (action.type === 'RESET_STATE') {\r\n        state = undefined\r\n    }\r\n    return appReducer(state, action)\r\n}\r\n\r\nexport default rootReducer;","export const serviceHelper = { get, post }\r\n\r\n// var host = \"https://api.github.com/users/\";\r\nvar host = \"\";\r\n\r\nfunction get(serviceUrl, requestData) {\r\n    return fetch(host + serviceUrl, {\r\n        headers: {\r\n            // 'Authorization': 'Bearer' + localStorage.getItem('token')\r\n            'Content-Type': \"application/json\"\r\n        }\r\n    }).then(res => {\r\n        if (res.status === 200) {\r\n            return res.json()\r\n        }\r\n        else {\r\n            if (res.status === 400) {\r\n\r\n            }\r\n            else if (res.status === 404 || res.message === 'Not Found') {\r\n                window.location.href = '/';\r\n            }\r\n            else if (res.status === 500) {\r\n\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nfunction post(serviceUrl, requestData) {\r\n    return fetch(host + serviceUrl, {\r\n        headers: {\r\n            // 'Authorization': 'Bearer' + localStorage.getItem('token')\r\n            'Content-Type': \"application/json\"\r\n        },\r\n        body: JSON.stringify(requestData)\r\n    }).then(res => {\r\n        if (res.status === 200) {\r\n            return res.json()\r\n        }\r\n        else {\r\n            if (res.status === 400 || res.message === 'Not Found') {\r\n\r\n            }\r\n            else if (res.status === 500) {\r\n\r\n            }\r\n        }\r\n    })\r\n}","import { serviceHelper } from './util/serviceHelper';\r\n\r\n// All api calls\r\nexport const getUserCity = (userName) => {\r\n    return serviceHelper.get(\"http://ip-api.com/json\")\r\n}\r\n\r\n// export const getWeather = (userName) => {\r\n//     return serviceHelper.get(\"https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/weather?q=London&appid=59134621c7de17186764ccbd9b558499\")\r\n// }\r\n\r\nexport const getWeather = (userName) => {\r\n    fetch(\"https://andruxnet-world-cities-v1.p.rapidapi.com/?query=paris&searchby=city\", {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n            \"x-rapidapi-key\": \"53c0dc0908mshb4c43628b89d679p1f19a0jsnc19c261b1858\",\r\n            \"x-rapidapi-host\": \"andruxnet-world-cities-v1.p.rapidapi.com\"\r\n        }\r\n    })\r\n        .then(response => {\r\n            console.log(response);\r\n        })\r\n        .catch(err => {\r\n            console.error(err);\r\n        });\r\n}\r\n\r\n","import { call, put, takeLatest } from 'redux-saga/effects'\r\nimport { getUserCity } from '../../apis';\r\nimport { GET_USERCITY, GET_USERCITY_SUCCESS, GET_USERCITY_FAILURE } from './actionTypes'\r\n\r\n//Generator function\r\nfunction* userCityDetails(action) {\r\n    try {\r\n        const response = yield call(getUserCity, action.payload.userName);\r\n        yield put({ type: GET_USERCITY_SUCCESS, data: response })\r\n    }   \r\n    catch (error) {\r\n        yield put({ type: GET_USERCITY_FAILURE, data: error })\r\n    }\r\n}\r\n\r\nexport function* userCitySaga() {\r\n    yield takeLatest(GET_USERCITY, userCityDetails);\r\n}","import { call, put, takeLatest } from 'redux-saga/effects'\r\nimport { getWeather } from '../../apis';\r\nimport { GET_WEATHER, GET_WEATHER_SUCCESS, GET_WEATHER_FAILURE } from './actionTypes'\r\n\r\n//Generator function\r\nfunction* weatherDetails(action) {\r\n    try {\r\n        const response = yield call(getWeather, action.payload.city);\r\n        yield put({ type: GET_WEATHER_SUCCESS, data: response })\r\n    }   \r\n    catch (error) {\r\n        yield put({ type: GET_WEATHER_FAILURE, data: error })\r\n    }\r\n}\r\n\r\nexport function* weatherSaga() {\r\n    yield takeLatest(GET_WEATHER, weatherDetails);\r\n}","import { all } from 'redux-saga/effects'\r\nimport { userCitySaga } from './state/userCity/saga'\r\nimport { weatherSaga } from './state/weather/saga'\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        userCitySaga(),\r\n        weatherSaga()\r\n    ]);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport createSagaMiddleWare from 'redux-saga';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport './assets/css/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport rootReducer from './shared/reducers';\nimport rootSaga from './shared/sagas'\n\nvar sagaMiddleWare = createSagaMiddleWare();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleWare));\nsagaMiddleWare.run(rootSaga)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}